/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 0;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const syscall_id_t_SYSCALL_PRINT: syscall_id_t = 0;
pub const syscall_id_t_SYSCALL_SLEEP: syscall_id_t = 1;
pub const syscall_id_t_SYSCALL_EXIT: syscall_id_t = 2;
pub const syscall_id_t_SYSCALL_LISTDIR: syscall_id_t = 3;
pub const syscall_id_t_SYSCALL_READ: syscall_id_t = 4;
pub const syscall_id_t_SYSCALL_FORK: syscall_id_t = 5;
pub const syscall_id_t_SYSCALL_OPEN: syscall_id_t = 6;
pub const syscall_id_t_SYSCALL_CLOSE: syscall_id_t = 7;
pub const syscall_id_t_SYSCALL_MMAP: syscall_id_t = 8;
pub const syscall_id_t_SYSCALL_MUNMAP: syscall_id_t = 9;
pub const syscall_id_t_SYSCALL_EXECVE: syscall_id_t = 10;
pub type syscall_id_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct string_t {
    pub ptr: *mut ::core::ffi::c_char,
    pub len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of string_t"][::core::mem::size_of::<string_t>() - 16usize];
    ["Alignment of string_t"][::core::mem::align_of::<string_t>() - 8usize];
    ["Offset of field: string_t::ptr"][::core::mem::offset_of!(string_t, ptr) - 0usize];
    ["Offset of field: string_t::len"][::core::mem::offset_of!(string_t, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct string_const_t {
    pub ptr: *const ::core::ffi::c_char,
    pub len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of string_const_t"][::core::mem::size_of::<string_const_t>() - 16usize];
    ["Alignment of string_const_t"][::core::mem::align_of::<string_const_t>() - 8usize];
    ["Offset of field: string_const_t::ptr"][::core::mem::offset_of!(string_const_t, ptr) - 0usize];
    ["Offset of field: string_const_t::len"][::core::mem::offset_of!(string_const_t, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_print_t {
    pub message: string_const_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_print_t"][::core::mem::size_of::<syscall_print_t>() - 16usize];
    ["Alignment of syscall_print_t"][::core::mem::align_of::<syscall_print_t>() - 8usize];
    ["Offset of field: syscall_print_t::message"]
        [::core::mem::offset_of!(syscall_print_t, message) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_sleep_t {
    pub milliseconds: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_sleep_t"][::core::mem::size_of::<syscall_sleep_t>() - 4usize];
    ["Alignment of syscall_sleep_t"][::core::mem::align_of::<syscall_sleep_t>() - 4usize];
    ["Offset of field: syscall_sleep_t::milliseconds"]
        [::core::mem::offset_of!(syscall_sleep_t, milliseconds) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_exit_t {
    pub status: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_exit_t"][::core::mem::size_of::<syscall_exit_t>() - 4usize];
    ["Alignment of syscall_exit_t"][::core::mem::align_of::<syscall_exit_t>() - 4usize];
    ["Offset of field: syscall_exit_t::status"]
        [::core::mem::offset_of!(syscall_exit_t, status) - 0usize];
};
pub const SYSCALL_LISTDIR_ENTRY_TYPE_FILE: u32 = 0;
pub const SYSCALL_LISTDIR_ENTRY_TYPE_DIR: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_listdir_entry_t {
    pub name: string_t,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_listdir_entry_t"]
        [::core::mem::size_of::<syscall_listdir_entry_t>() - 24usize];
    ["Alignment of syscall_listdir_entry_t"]
        [::core::mem::align_of::<syscall_listdir_entry_t>() - 8usize];
    ["Offset of field: syscall_listdir_entry_t::name"]
        [::core::mem::offset_of!(syscall_listdir_entry_t, name) - 0usize];
    ["Offset of field: syscall_listdir_entry_t::type_"]
        [::core::mem::offset_of!(syscall_listdir_entry_t, type_) - 16usize];
};
pub type syscall_listdir_error_t = u32;
pub const SYSCALL_LISTDIR_ERROR_NONE: syscall_listdir_error_t = 0;
pub const SYSCALL_LISTDIR_ERROR_NOT_FOUND: syscall_listdir_error_t = 1;
pub const SYSCALL_LISTDIR_ERROR_BUFFER_TOO_SMALL: syscall_listdir_error_t = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_listdir_return_t {
    pub entries_count: u32,
    pub error: syscall_listdir_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_listdir_return_t"]
        [::core::mem::size_of::<syscall_listdir_return_t>() - 8usize];
    ["Alignment of syscall_listdir_return_t"]
        [::core::mem::align_of::<syscall_listdir_return_t>() - 4usize];
    ["Offset of field: syscall_listdir_return_t::entries_count"]
        [::core::mem::offset_of!(syscall_listdir_return_t, entries_count) - 0usize];
    ["Offset of field: syscall_listdir_return_t::error"]
        [::core::mem::offset_of!(syscall_listdir_return_t, error) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_listdir_t {
    pub path: string_const_t,
    pub entries: *mut syscall_listdir_entry_t,
    pub entries_len: u32,
    pub return_value: syscall_listdir_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_listdir_t"][::core::mem::size_of::<syscall_listdir_t>() - 40usize];
    ["Alignment of syscall_listdir_t"][::core::mem::align_of::<syscall_listdir_t>() - 8usize];
    ["Offset of field: syscall_listdir_t::path"]
        [::core::mem::offset_of!(syscall_listdir_t, path) - 0usize];
    ["Offset of field: syscall_listdir_t::entries"]
        [::core::mem::offset_of!(syscall_listdir_t, entries) - 16usize];
    ["Offset of field: syscall_listdir_t::entries_len"]
        [::core::mem::offset_of!(syscall_listdir_t, entries_len) - 24usize];
    ["Offset of field: syscall_listdir_t::return_value"]
        [::core::mem::offset_of!(syscall_listdir_t, return_value) - 28usize];
};
pub type fd_t = i32;
pub const FD_STDIN: fd_t = 0;
pub type syscall_read_error_t = u32;
pub const SYSCALL_READ_ERROR_NONE: syscall_read_error_t = 0;
pub const SYSCALL_READ_ERROR_INVALID_FD: syscall_read_error_t = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_read_return_t {
    pub bytes_read: u32,
    pub error: syscall_read_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_read_return_t"][::core::mem::size_of::<syscall_read_return_t>() - 8usize];
    ["Alignment of syscall_read_return_t"]
        [::core::mem::align_of::<syscall_read_return_t>() - 4usize];
    ["Offset of field: syscall_read_return_t::bytes_read"]
        [::core::mem::offset_of!(syscall_read_return_t, bytes_read) - 0usize];
    ["Offset of field: syscall_read_return_t::error"]
        [::core::mem::offset_of!(syscall_read_return_t, error) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_read_t {
    pub fd: fd_t,
    pub buf: *mut ::core::ffi::c_void,
    pub len: u32,
    pub return_value: syscall_read_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_read_t"][::core::mem::size_of::<syscall_read_t>() - 32usize];
    ["Alignment of syscall_read_t"][::core::mem::align_of::<syscall_read_t>() - 8usize];
    ["Offset of field: syscall_read_t::fd"][::core::mem::offset_of!(syscall_read_t, fd) - 0usize];
    ["Offset of field: syscall_read_t::buf"][::core::mem::offset_of!(syscall_read_t, buf) - 8usize];
    ["Offset of field: syscall_read_t::len"]
        [::core::mem::offset_of!(syscall_read_t, len) - 16usize];
    ["Offset of field: syscall_read_t::return_value"]
        [::core::mem::offset_of!(syscall_read_t, return_value) - 20usize];
};
pub type pid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_fork_return_t {
    pub child_pid: pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_fork_return_t"][::core::mem::size_of::<syscall_fork_return_t>() - 4usize];
    ["Alignment of syscall_fork_return_t"]
        [::core::mem::align_of::<syscall_fork_return_t>() - 4usize];
    ["Offset of field: syscall_fork_return_t::child_pid"]
        [::core::mem::offset_of!(syscall_fork_return_t, child_pid) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_fork_t {
    pub return_value: syscall_fork_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_fork_t"][::core::mem::size_of::<syscall_fork_t>() - 4usize];
    ["Alignment of syscall_fork_t"][::core::mem::align_of::<syscall_fork_t>() - 4usize];
    ["Offset of field: syscall_fork_t::return_value"]
        [::core::mem::offset_of!(syscall_fork_t, return_value) - 0usize];
};
pub type syscall_open_error_t = u32;
pub const SYSCALL_OPEN_ERROR_NONE: syscall_open_error_t = 0;
pub const SYSCALL_OPEN_ERROR_NOT_FOUND: syscall_open_error_t = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_open_return_t {
    pub fd: fd_t,
    pub error: syscall_open_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_open_return_t"][::core::mem::size_of::<syscall_open_return_t>() - 8usize];
    ["Alignment of syscall_open_return_t"]
        [::core::mem::align_of::<syscall_open_return_t>() - 4usize];
    ["Offset of field: syscall_open_return_t::fd"]
        [::core::mem::offset_of!(syscall_open_return_t, fd) - 0usize];
    ["Offset of field: syscall_open_return_t::error"]
        [::core::mem::offset_of!(syscall_open_return_t, error) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_open_t {
    pub path: string_const_t,
    pub return_value: syscall_open_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_open_t"][::core::mem::size_of::<syscall_open_t>() - 24usize];
    ["Alignment of syscall_open_t"][::core::mem::align_of::<syscall_open_t>() - 8usize];
    ["Offset of field: syscall_open_t::path"]
        [::core::mem::offset_of!(syscall_open_t, path) - 0usize];
    ["Offset of field: syscall_open_t::return_value"]
        [::core::mem::offset_of!(syscall_open_t, return_value) - 16usize];
};
pub type syscall_close_error_t = u32;
pub const SYSCALL_CLOSE_ERROR_NONE: syscall_close_error_t = 0;
pub const SYSCALL_CLOSE_ERROR_INVALID_FD: syscall_close_error_t = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_close_return_t {
    pub error: syscall_close_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_close_return_t"][::core::mem::size_of::<syscall_close_return_t>() - 4usize];
    ["Alignment of syscall_close_return_t"]
        [::core::mem::align_of::<syscall_close_return_t>() - 4usize];
    ["Offset of field: syscall_close_return_t::error"]
        [::core::mem::offset_of!(syscall_close_return_t, error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_close_t {
    pub fd: fd_t,
    pub return_value: syscall_close_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_close_t"][::core::mem::size_of::<syscall_close_t>() - 8usize];
    ["Alignment of syscall_close_t"][::core::mem::align_of::<syscall_close_t>() - 4usize];
    ["Offset of field: syscall_close_t::fd"][::core::mem::offset_of!(syscall_close_t, fd) - 0usize];
    ["Offset of field: syscall_close_t::return_value"]
        [::core::mem::offset_of!(syscall_close_t, return_value) - 4usize];
};
pub type syscall_mmap_error_t = u32;
pub const SYSCALL_MMAP_ERROR_NONE: syscall_mmap_error_t = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_mmap_return_t {
    pub addr: *mut ::core::ffi::c_void,
    pub error: syscall_mmap_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_mmap_return_t"][::core::mem::size_of::<syscall_mmap_return_t>() - 16usize];
    ["Alignment of syscall_mmap_return_t"]
        [::core::mem::align_of::<syscall_mmap_return_t>() - 8usize];
    ["Offset of field: syscall_mmap_return_t::addr"]
        [::core::mem::offset_of!(syscall_mmap_return_t, addr) - 0usize];
    ["Offset of field: syscall_mmap_return_t::error"]
        [::core::mem::offset_of!(syscall_mmap_return_t, error) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_mmap_t {
    pub size: u32,
    pub return_value: syscall_mmap_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_mmap_t"][::core::mem::size_of::<syscall_mmap_t>() - 24usize];
    ["Alignment of syscall_mmap_t"][::core::mem::align_of::<syscall_mmap_t>() - 8usize];
    ["Offset of field: syscall_mmap_t::size"]
        [::core::mem::offset_of!(syscall_mmap_t, size) - 0usize];
    ["Offset of field: syscall_mmap_t::return_value"]
        [::core::mem::offset_of!(syscall_mmap_t, return_value) - 8usize];
};
pub type syscall_munmap_error_t = u32;
pub const SYSCALL_MUNMAP_ERROR_NONE: syscall_munmap_error_t = 0;
pub const SYSCALL_MUNMAP_ERROR_INVALID_ADDR: syscall_munmap_error_t = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_munmap_return_t {
    pub error: syscall_munmap_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_munmap_return_t"][::core::mem::size_of::<syscall_munmap_return_t>() - 4usize];
    ["Alignment of syscall_munmap_return_t"]
        [::core::mem::align_of::<syscall_munmap_return_t>() - 4usize];
    ["Offset of field: syscall_munmap_return_t::error"]
        [::core::mem::offset_of!(syscall_munmap_return_t, error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_munmap_t {
    pub addr: *mut ::core::ffi::c_void,
    pub size: u32,
    pub return_value: syscall_munmap_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_munmap_t"][::core::mem::size_of::<syscall_munmap_t>() - 16usize];
    ["Alignment of syscall_munmap_t"][::core::mem::align_of::<syscall_munmap_t>() - 8usize];
    ["Offset of field: syscall_munmap_t::addr"]
        [::core::mem::offset_of!(syscall_munmap_t, addr) - 0usize];
    ["Offset of field: syscall_munmap_t::size"]
        [::core::mem::offset_of!(syscall_munmap_t, size) - 8usize];
    ["Offset of field: syscall_munmap_t::return_value"]
        [::core::mem::offset_of!(syscall_munmap_t, return_value) - 12usize];
};
pub type syscall_execve_error_t = u32;
pub const SYSCALL_EXECVE_ERROR_NONE: syscall_execve_error_t = 0;
pub const SYSCALL_EXECVE_ERROR_NOT_FOUND: syscall_execve_error_t = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_execve_return_t {
    pub error: syscall_execve_error_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_execve_return_t"][::core::mem::size_of::<syscall_execve_return_t>() - 4usize];
    ["Alignment of syscall_execve_return_t"]
        [::core::mem::align_of::<syscall_execve_return_t>() - 4usize];
    ["Offset of field: syscall_execve_return_t::error"]
        [::core::mem::offset_of!(syscall_execve_return_t, error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_execve_t {
    pub path: string_const_t,
    pub argv: *mut string_const_t,
    pub argv_len: u32,
    pub envp: *mut string_const_t,
    pub envp_len: u32,
    pub return_value: syscall_execve_return_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_execve_t"][::core::mem::size_of::<syscall_execve_t>() - 48usize];
    ["Alignment of syscall_execve_t"][::core::mem::align_of::<syscall_execve_t>() - 8usize];
    ["Offset of field: syscall_execve_t::path"]
        [::core::mem::offset_of!(syscall_execve_t, path) - 0usize];
    ["Offset of field: syscall_execve_t::argv"]
        [::core::mem::offset_of!(syscall_execve_t, argv) - 16usize];
    ["Offset of field: syscall_execve_t::argv_len"]
        [::core::mem::offset_of!(syscall_execve_t, argv_len) - 24usize];
    ["Offset of field: syscall_execve_t::envp"]
        [::core::mem::offset_of!(syscall_execve_t, envp) - 32usize];
    ["Offset of field: syscall_execve_t::envp_len"]
        [::core::mem::offset_of!(syscall_execve_t, envp_len) - 40usize];
    ["Offset of field: syscall_execve_t::return_value"]
        [::core::mem::offset_of!(syscall_execve_t, return_value) - 44usize];
};
